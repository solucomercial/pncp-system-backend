// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model para Licitações do PNCP
model Licitacao {
  id                              String    @id @default(cuid())
  numeroControlePNCP              String    @unique
  numeroCompra                    String
  anoCompra                       Int
  processo                        String?   @db.Text
  modalidadeNome                  String
  modoDisputaNome                 String?
  situacaoCompraNome              String
  objetoCompra                    String    @db.Text
  informacaoComplementar          String?   @db.Text
  valorTotalEstimado              Float?
  valorTotalHomologado            Float?  
  dataAberturaProposta            DateTime?
  dataEncerramentoProposta        DateTime?
  dataPublicacaoPncp              DateTime
  dataInclusao                    DateTime
  dataAtualizacao                 DateTime
  cnpjOrgaoEntidade               String
  razaoSocialOrgaoEntidade        String
  codigoUnidadeOrgao              String
  nomeUnidadeOrgao                String
  municipioNomeUnidadeOrgao       String
  ufSiglaUnidadeOrgao             String
  linkSistemaOrigem               String?   @db.Text 
  srp                             Boolean   
  amparoLegalNome                 String?  
  sequencialCompra                Int?  
  linkProcessoEletronico          String?
  tipoInstrumentoConvocatorioNome String? 
  justificativaPresencial         String? 
  dataAtualizacaoGlobal           DateTime?

  @@index([dataPublicacaoPncp])
  @@index([ufSiglaUnidadeOrgao])
  @@index([modalidadeNome])
}

// --- Modelos de Autenticação (NextAuth.js) ---

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SyncLog {
  id            String   @id @default(cuid())
  runAt         DateTime @default(now())
  createdCount  Int
  updatedCount  Int
}